<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>objLight</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.grav = 1.5
global.velY = 0
global.right = true
global.ground = false
image_speed = 0.5


death_flag = false


pl_light_init(90, make_color_rgb(252, 150, 55), 0.8);

x = global.spawnx 
y = global.spawny 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var velocity = 7
var offX = 0
var offY = 0
var climb_flag = false //A flag which is set if the player is in a climbable tile
var moved = false
var sprint = false

if(global.pause){exit;}

//User input controls
if(!death_flag){

    if(place_meeting(x, y, fall_o)){
        with(fall_o){
            if(y &lt; player_o.y){
                player_o.death_flag = true
                player_o.image_speed = 0.5
            }
        }
    }
    
    if(y &gt; 2010){
        death_flag = true    
    }

  if(keyboard_check(vk_shift)){
      velocity = 10
      sprint = true
  }
  if(keyboard_check(ord('A'))){
    if(place_meeting(x - velocity, y, push_o)){
      offX = -velocity
      with(push_o){
      x += offX
    }
    }else if(!place_meeting(x - velocity, y, wall_o)){
      offX = -velocity
    }
    global.right = true
      moved = true
  }
  
  if(keyboard_check(ord('R'))){
    death_flag = true
  }
  
  if(keyboard_check(ord('T'))){
    room_goto(room2)
  }

  if(keyboard_check(ord('D'))){

    if(place_meeting(x + velocity, y, push_o)){
      offX = velocity
      with(push_o){
      x += offX
      }
    }
    else if(!place_meeting(x + velocity, y, wall_o)){
      offX = velocity
    }

    global.right = false
    moved = true
  }


  if(keyboard_check(ord(' ')) &amp;&amp; global.ground){
    global.velY = -22
    global.ground = false
    if(global.sound)
    audio_play_sound(jump_s_v2, 2, false);
    show_debug_message("JUMP")
  }
   
    //Check for tile breaking
    if(keyboard_check(vk_right)){
        if(place_meeting(x + 10, y - 10, break_o)){
            with instance_place(x + 10, y, break_o) {
                instance_destroy()
            }
        }
    }
    if(keyboard_check(vk_up)){
        if(place_meeting(x, y - 10, break_o)){
            with instance_place(x, y - 10, break_o) {
                instance_destroy()
            }
        }
    }
    if(keyboard_check(vk_left)){
        if(place_meeting(x - 10, y - 10, break_o)){
            with instance_place(x - 10, y, break_o) {
                instance_destroy()
            }
        }
    }
    if(keyboard_check(vk_down)){
        if(place_meeting(x, y + 10, break_o)){
            with instance_place(x, y + 10, break_o) {
                instance_destroy()
            }
        }
    }
    
    //Check for multi directional climb tile
    if(place_meeting(x, y, climb_multi)){
        climb_flag = true
    
        if(keyboard_check(ord('W'))){
            offY -= 10
            moved = true
        }
        else if(keyboard_check(ord('S'))){
            offY += 10
            moved = true
        }
        else{
            moved = false
        }
    }else if(place_meeting(x, y, climb_up)){
        climb_flag = true
        if(global.velY &gt; 0){ //Prevents wall clipping down
            offY -= 8
        }
    }else if(place_meeting(x, y, climb_down)){
        climb_flag = true
        if(global.velY &gt; 0){ //Prevents wall clipping down
            offY += 8
        }
    }else{
    
        offY = global.velY
        //Set player's position to exact pixel, used for precise collision
        if(place_meeting(x, y + global.velY, wall_o)){
            if(global.velY &gt; 0){
                global.ground = true
                
            }
            while(place_meeting(x, y + offY, wall_o) &amp;&amp; global.velY != 0){
                offY -= global.velY / abs(global.velY)
            }
        climb_flag = false
        }
    }
    
    
    if(climb_flag){
       /* if(place_meeting(x, y + offY, wall_o)){
            while(place_meeting(x, y + offY, wall_o) &amp;&amp; offY != 0){
                offY -= offY / abs(offY)
            }
        }*/
        sprite_index = player_s_climb
    }else if(!death_flag){
        sprite_index = player_s
    
    }
    
    if(offY == 0 || climb_flag){ //If player is climbing, we don't want their velocity to accumulate
        global.velY = 0
    }
    
    if(global.right){
        image_xscale = 1
    }else{
        image_xscale = -1
    }
    
    if(moved){
        if(sprint){
            image_speed = 0.8
        }
        else{
            image_speed = 0.5
        }
    }else{
        image_index = 0
        image_speed = 0
    }

    //Check if there is a platform below and if the player is on the ground
    if(global.ground &amp;&amp; place_meeting(x, y + 1, wall_o)){
        global.velY = 0
    }else{
        global.velY += global.grav
    }
    
    if(place_meeting(x + offX, y, wall_o)){
        while(place_meeting(x + offX, y, wall_o) &amp;&amp; offX != 0){
            offX -= offX / abs(offX)
        }
    }
    
    if(!place_meeting(x + offX, y + offY, wall_o)){
        y += offY
        x += offX
        if(x &lt; 0){
            x = 0
        }
    }
}else{

    offY = global.velY
    //Set player's position to exact pixel, used for precise collision
    if(place_meeting(x, y + global.velY, wall_o)){
        if(global.velY &gt; 0){
            global.ground = true
        }
        while(place_meeting(x, y + offY, wall_o) &amp;&amp; global.velY != 0){
            offY -= global.velY / abs(global.velY)
        }
        climb_flag = false
        global.velY += global.grav
        y += offY
    }
    
    global.bombs = global.check_bombs
    if(sprite_index != player_s_die){
        image_speed = 0.5
        sprite_index = player_s_die
        audio_play_sound(swoosh_s, 10, false)
    }
    if (image_index &gt; 53){
        image_speed = 0;
        sprite_index = player_s
        
        room_goto(main)
      
        death_flag = false
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_text(10, 10, string(x) + " " + string(y))

draw_sprite(spider_s, image_index, 800, 10)
draw_text(860, 30, string(global.bombs))


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
