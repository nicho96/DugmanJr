<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.grav = 1.5
global.velY = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var velocity = 5
var offX = 0
var offY = 0
var climb_flag = false //A flag which is set if the player is in a climbable tile

//User input controls
if(keyboard_check(ord('A'))){
    if(!place_meeting(x - velocity, y, wall_o) || place_meeting(x - velocity, y, push_o)){
        offX = -velocity 
    }
}

if(keyboard_check(ord(' ')) &amp;&amp; place_meeting(x, y + 1, wall_o)){
    global.velY = -18
}

if(keyboard_check(ord('D'))){
    if(!place_meeting(x + velocity, y, wall_o) || place_meeting(x + velocity, y, push_o)){
        offX = velocity
    }
}

//Check for tile breaking
if(keyboard_check(vk_right)){
    if(place_meeting(x + 10, y, break_o)){
        with instance_place(x + 10, y, break_o) {
            instance_destroy()
        }
    } 
}
if(keyboard_check(vk_up)){
    if(place_meeting(x, y - 10, break_o)){
        with instance_place(x, y - 10, break_o) {
            instance_destroy()
        }
    } 
}
if(keyboard_check(vk_left)){
    if(place_meeting(x - 10, y, break_o)){
        with instance_place(x - 10, y, break_o) {
            instance_destroy()
        }
    } 
}
if(keyboard_check(vk_down)){
    if(place_meeting(x, y + 10, break_o)){
        with instance_place(x, y + 10, break_o) {
            instance_destroy()
        }
    } 
}

//Check for multi directional climb tile
if(place_meeting(x, y, climb_multi)){
    climb_flag = true
    if(keyboard_check(ord('W')))
        offY -= 4
    else if(keyboard_check(ord('S')))
        offY += 4
}else if(place_meeting(x, y, climb_up)){
    climb_flag = true
    if(global.velY &gt; 0){ //Prevents wall clipping down
        offY -= 8
    }
}else if(place_meeting(x, y, climb_down)){
    climb_flag = true
    if(global.velY &gt; 0){ //Prevents wall clipping down
        offY += 8
    }
}else{
    offY = global.velY
    //Set player's position to exact pixel, used for precise collision
    if(place_meeting(x, y + global.velY, wall_o)){
        while(place_meeting(x, y + offY, wall_o)){
            offY -= global.velY / abs(global.velY)
        }
    }
}

if(climb_flag){
    if(place_meeting(x, y + offY, wall_o)){
        while(place_meeting(x, y + offY, wall_o)){
            offY -= offY / abs(offY)
        }
    }
}

x += offX
y += offY

if(offY == 0 || climb_flag){ //If player is climbing, we don't want their velocity to accumulate
    global.velY = 0
}

global.velY += global.grav
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
